parameters:
  name: osx
  queueDemands: Agent.OS -eq Darwin
  queueName: DotNetCore-Mac

phases:
- phase: ${{ parameters.name }}
  variables:
    # Prefix to distinguish artifacts from different legs.
    artifactName: ${{ format('$(azdo.type)_{0}', parameters.name) }}
    azdo.buildConfiguration: Release
    azdo.type: online
    logsDirectory: $(Build.ArtifactStagingDirectory)/logs
  queue:
    name: ${{ parameters.queueName }}
    demands: ${{ parameters.queueDemands }}
    timeoutInMinutes: 240

  steps:
  - checkout: self
    clean: true

  - script: |
      ( set -o posix; set )
    displayName: Print all variables in environment

  - template: ../steps/init-submodules-sh.yml

  # Build source-build.
  - script: |
      ./build.sh \
        /p:Configuration=$(azdo.buildConfiguration) \
        /p:ProdConBlobFeedUrlPrefix=$(prodConBlobFeedUrlPrefix)
    displayName: Build source-build
    timeoutInMinutes: 90

  # Run smoke tests.
  - script: |
      ./build.sh \
        /t:RunSmokeTest \
        /p:Configuration=$(azdo.buildConfiguration) \
        /p:ProdConBlobFeedUrlPrefix=$(prodConBlobFeedUrlPrefix)
    displayName: Run smoke-test

  - script: |
      set -x
      # Clean up previous build's staging dir, in case VSTS didn't do it.
      rm -rf "$(logsDirectory)"
      # Copy all these files to the logs dir, preserving relative path.
      mkdir -p "$(logsDirectory)"
      find . \( \
        -path './bin/*-report/*' -o \
        -iname '*.binlog' -o \
        -iname '*.log' \) \
        -exec rsync -R {} "$(logsDirectory)" \;
    displayName: Copy logs to staging directory
    condition: always()
    continueOnError: true

  # Publish artifacts.
  - task: PublishBuildArtifacts@1
    displayName: Publish Logs artifact
    condition: always()
    continueOnError: true
    inputs:
      PathtoPublish: $(logsDirectory)
      ArtifactName: Logs $(artifactName)
      ArtifactType: Container
