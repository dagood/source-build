<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))/dir.props" />
  <PropertyGroup>
    <BuildArguments>$(Platform) $(Configuration) skiptests</BuildArguments>
    <BuildArguments Condition="'$(SkipDisablePgo)' != 'true'">$(BuildArguments) -nopgooptimize</BuildArguments>
    <BuildArguments Condition="'$(OS)' != 'Windows_NT'">$(BuildArguments) msbuildonunsupportedplatform</BuildArguments>
    <BuildArguments Condition="'$(UseSystemLibraries)' == 'true' AND '$(OS)' != 'Windows_NT'">$(BuildArguments) cmakeargs -DCLR_CMAKE_USE_SYSTEM_LIBUNWIND=TRUE</BuildArguments>
    <BuildArguments Condition="$(Platform.Contains('arm'))">$(BuildArguments) skipnuget cross -skiprestore cmakeargs -DFEATURE_GDBJIT=TRUE</BuildArguments>
    <!-- Portable builds only apply to Linux - Mac and Windows are both always portable.
         Additionally, Linux builds are portable by default and only have a switch to turn it off -->
    <BuildArguments Condition="'$(TargetOS)' == 'Linux' and '$(PortableBuild)' == 'false'">$(BuildArguments) -PortableBuild=false</BuildArguments>

    <BuildArguments>$(BuildArguments) --</BuildArguments>

    <BuildCommand>$(ProjectDirectory)/build$(ShellExtension) $(BuildArguments)</BuildCommand>

    <BuildCommand Condition="$(Platform.Contains('arm'))">$(ArmEnvironmentVariables) $(BuildCommand)</BuildCommand>

    <CleanCommand>$(ProjectDirectory)/clean$(ShellExtension)</CleanCommand>
    <OfficialBuildId>20181014-03</OfficialBuildId>
  </PropertyGroup>

  <ItemGroup>
    <BuiltSdkPackageOverride Include="@(ILSdkOverride)" />
  </ItemGroup>

  <ItemGroup>
    <RepositoryReference Include="linker" />

    <!--
      This is an ordering dependency, not a dependency on corefx assets.
      
      We just need to make sure corefx AllConfigurations runs first: coreclr produces some packages
      that may interfere. AllConfigurations depends on more assets matching between coreclr and
      corefx than the vertical, and some packages that coreclr doesn't source-build. To prevent
      mismatch errors, don't try to use source-built coreclr to build corefx AllConfigurations yet.

      This dependency can be removed when we have more isolation. https://github.com/dotnet/source-build/issues/928
    -->
    <RepositoryReference Include="corefx-allconfigurations" />
  </ItemGroup>

  <ItemGroup>
    <EnvironmentVariables Include="OfficialBuildId=$(OfficialBuildId)" />
  </ItemGroup>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))/dir.targets" />
</Project>
